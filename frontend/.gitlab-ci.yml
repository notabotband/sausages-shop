stages:
  - build
  - test-sonar
  - test
  - release
  - notification
  - deploy
include:
  - project: "templates/ci"
    file: "DockerInDockerTemplate.yml"
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

build-from-nexus:
  stage: build
  script:
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt
    - cd frontend
    - npm install
    - npm run build
    - cd ..
    - mkdir sausage-store-${VERSION}
    - mv frontend/dist/frontend sausage-store-${VERSION}/public_html
  artifacts:
    paths:
      - sausage-store-${VERSION}/public_html
    reports:
      dotenv: CI_JOB_ID.txt

sonarqube-frontend:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    SONAR_HOST_URL: "${SONARQUBE_URL}"
    SONAR_FRONTEND_LOGIN: "${SONAR_FRONTEND_LOGIN}"
    SONAR_FRONTEND_PROJECT_NAME: "${SONAR_FRONTEND_PROJECT_NAME}"
    SONAR_FRONTEND_PROJECT_KEY: "${SONAR_FRONTEND_PROJECT_KEY}"
    GIT_DEPTH: "0"
  stage: test-sonar
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd frontend
    - sonar-scanner -Dsonar.projectName=${SONAR_FRONTEND_PROJECT_NAME} -Dsonar.projectKey=${SONAR_FRONTEND_PROJECT_KEY} -Dsonar.sources=. -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONAR_FRONTEND_LOGIN}
  allow_failure: true

release:
  stage: release
  script:
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - >
      curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL}/sausage-store-antipov-stanislav-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz
  rules:
    - changes:
        - frontend/*

build-frontend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:${VERSION}
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:${VERSION}

upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:${VERSION}
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:${VERSION} $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest

deploy-frontend:
  stage: deploy
  image: vault:1.11.3
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo -e "SPRING_CLOUD_VAULT_TOKEN=$SPRING_CLOUD_VAULT_TOKEN\nSPRING_CLOUD_VAULT_HOST=$SPRING_CLOUD_VAULT_HOST\n" > .env_file
    - scp -r ./.env_file ./sausage-store.service ./docker-compose.yml ./nginx.tmpl ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/
    - ssh ${DEV_USER}@${DEV_HOST}
      DEV_USER=${DEV_USER} \
      SPRING_CLOUD_VAULT_TOKEN=${SPRING_CLOUD_VAULT_TOKEN} \
      SPRING_CLOUD_VAULT_HOST=${SPRING_CLOUD_VAULT_HOST} \
      REGISTRY_ACCESS_TOKEN=${REGISTRY_ACCESS_TOKEN} \
      REGISTRY_USER=${REGISTRY_USER} \
      /bin/bash ./deploy-compose.sh
  environment:
    name: staging
    url: https://${DEV_HOST}
  when: manual
