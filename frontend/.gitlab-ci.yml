stages:
  - build
  - test
  - test-sonar
  - release
  - notification
  - deploy
include:
  - project: "templates/ci"
    file: "DockerInDockerTemplate.yml"
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

build-from-nexus:
  stage: build
  script:
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt
    - cd frontend
    - npm install
    - npm run build
    - cd ..
    - mkdir sausage-store-${VERSION}
    - mv frontend/dist/frontend sausage-store-${VERSION}/public_html
  artifacts:
    paths:
      - sausage-store-${VERSION}/public_html
    reports:
      dotenv: CI_JOB_ID.txt

sonarqube-frontend-sast:
  stage: test-sonar
  dependencies:
    - build
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.sources=.
      -Dsonar.projectName=${SONAR_FRONTEND_PROJECT_NAME}
      -Dsonar.projectKey=${SONAR_FRONTEND_PROJECT_KEY}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_FRONTEND_LOGIN}


release:
  stage: release
  script:
    - cd frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - >
      curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL}/sausage-store-antipov-stanislav-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz
  rules:
    - changes:
        - frontend/*

build-frontend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:${VERSION}
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:${VERSION}

upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:${VERSION}
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:${VERSION} $CI_REGISTRY_IMAGE/sausage-frontend:${VERSION}
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:${VERSION}

deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
      export "SPRING_DATASOURCE_URL=${PSQL_DATASOURCE}";
      export "SPRING_DATASOURCE_USERNAME=${PSQL_USER}";
      export "SPRING_DATASOURCE_PASSWORD=${PSQL_PASSWORD}";
      export "SPRING_DATA_MONGODB_URI=${MONGO_DATA}";
      export "DOCKER_GITLAB_USER=${DOCKER_GITLAB_USER}";
      export "DOCKER_GITLAB_TOCKEN=${DOCKER_GITLAB_TOCKEN}";
      /bin/bash -s " < ./frontend/frontend_deploy.sh
  environment:
    name: staging
    url: https://${DEV_HOST}
  when: manual
