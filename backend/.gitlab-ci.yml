cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

before_script:
  #устанавливаем ssh-agent для удобства аутентификации по ssh
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  #сохраняем сгенеренный ранее приватный ключ для раннера
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 600 ~/.ssh
  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

stages:
  - build
  - test
  - release
  - notify
  - deploy

build:
  stage: build
  script:
    - cd backend
    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}
  rules: # rules и only в данных случаях взаимозаменяемы
    - changes:
        - backend/*

release:
  stage: release
  script:
    - cd backend
    - mvn deploy -DskipTests -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml
  rules:
    - changes:
        - backend/*

sonarqube-backend-sast:
  stage: test
  dependencies:
    - build
  image: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=${SONAR_BACKEND_PROJECT_NAME}
      -Dsonar.projectKey=${SONAR_BACKEND_PROJECT_KEY}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_BACKEND_LOGIN}

telegram-notification-backend:
  stage: notify
  only:
    changes:
      - backend/*
  needs:
    - release
  script:
    - "curl -X POST -H 'Content-type: application/json' --data '{\"chat_id\": \"'${TELEGRAM_CANAL_ID}'\", \"text\": \"Вышла новая версия backend '$CI_PROJECT_NAME' - '${VERSION}'. Скачать backend можно по ссылке — '${NEXUS_REPO_URL}'/sausage-store-antipov-stanislav-backend/com/yandex/practicum/devops/sausage-store/'${VERSION}'/sausage-store-'${VERSION}'.jar \"}' https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"

deploy:
  stage: deploy
  script:
    - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
    - ssh ${DEV_USER}@${DEV_HOST}
    - curl -u ${NEXUS_REPO_USER}:${NEXUS_REPO_PASS} -o sausage-store.jar ${NEXUS_REPO_URL}/sausage-store-antipov-stanislav-backend/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
    - sudo cp ./sausage-store.jar /home/jarservice/sausage-store.jar||true
    - sudo systemctl daemon-reload
    - sudo systemctl restart sausage-store-backend.service
  environment:
    name: development
    url: https://${DEV_HOST}
