variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

stages:
  - build
  - test
  - release
  - notify

include:
  - template: Security/SAST.gitlab-ci.yml

build-backend-code-job:
  stage: build
  script:
    - cd backend
    - mvn package -Dmaven.repo.local=${MAVEN_REPO_PATH} -Dversion.application=${VERSION}
  cache:
    key: 'build-backend'
    paths:
      - ${CI_PROJECT_DIR}/backend/.m2/repository

build-frontend-code-job:
  stage: build
  script:
    - cd frontend
    - npm install
    - npm run build
  cache:
    key: 'build-backend'
    paths:
      - ${CI_PROJECT_DIR}/frontend/.npm/

spotbugs-sast:
  stage: test
  dependencies:
    - build-backend-code-job
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 17
    MAVEN_REPO_PATH: ${MAVEN_REPO_PATH}

sonarqube-backend-sast:
  stage: test
  dependencies:
    - build-backend-code-job
  image: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=${SONAR_BACKEND_PROJECT_NAME}
      -Dsonar.projectKey=${SONAR_BACKEND_PROJECT_KEY}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_BACKEND_LOGIN}

sonarqube-frontend-sast:
  stage: test
  dependencies:
    - build-frontend-code-job
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.sources=.
      -Dsonar.projectName=${SONAR_FRONTEND_PROJECT_NAME}
      -Dsonar.projectKey=${SONAR_FRONTEND_PROJECT_KEY}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_FRONTEND_LOGIN}

upload-backend-release:
  stage: release
  dependencies:
    - build-frontend-code-job
  script:
    - cd backend
    - mvn -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml -Dversion.application=${VERSION} -DskipTests deploy

upload-frontend-release:
  stage: release
  dependencies:
    - build-frontend-code-job
  script:
    - cd ${CI_PROJECT_DIR}/frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL}/sausage-store-antipov-stas-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz

pachca-notification-backend:
  stage: notify
  needs:
    - upload-backend-release
  script:
    - "curl -X POST -H 'Content-type: application/json' --data '{\"chat_id\": \"'${TELEGRAM_CANAL_ID}'\", \"text\": \"Вышла новая версия backend '$CI_PROJECT_NAME' - '${VERSION}'. Скачать backend можно по ссылке — '${NEXUS_REPO_URL}'/sausage-store-antipov-stas-backend/com/yandex/practicum/devops/sausage-store/'${VERSION}'/sausage-store-'${VERSION}'.jar \"}' https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"


pachca-notification-frontend:
  stage: notify
  needs:
    - upload-frontend-release
  script:
    - "curl -X POST -H 'Content-type: application/json' --data '{\"chat_id\": \"'${TELEGRAM_CANAL_ID}'\", \"text\": \"Вышла новая версия frontend '$CI_PROJECT_NAME' - '${VERSION}'. Скачать frontend можно по ссылке — '${NEXUS_REPO_URL}'/sausage-store-antipov-stas-frontend/com/yandex/practicum/devops/sausage-store/'${VERSION}'/sausage-store-'${VERSION}'.tar.gz \"}' https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"