stages:
  - build
  - test-sonar
  - test
  - release
  - deploy
include:
  - template: Security/SAST.gitlab-ci.yml
  - project: "templates/ci"
    file: "DockerInDockerTemplate.yml"
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ./.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90

build-code-job:
  stage: build
  image: docker:stable-dind
  services:
    - docker:dind
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - cd backend-report
    - docker build --cache-from ${CI_REGISTRY}/${CI_PROJECT_PATH}/sausage-backend-report:latest --build-arg APP_VERSION=${VERSION} -t ${CI_REGISTRY}/${CI_PROJECT_PATH}/sausage-backend-report:${VERSION} .
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}/sausage-backend-report:${VERSION}

spotbugs-sast:
  variables:
    COMPILE: "true"
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

sonarqube-backend:
  image:
    name: maven:3.8-openjdk-16
  variables:
    SONAR_HOST_URL: "${SONARQUBE_URL}"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    SONAR_BACKEND_LOGIN: "${SONAR_BACKEND_LOGIN}"
    SONAR_BACKEND_PROJECT_KEY: "${SONAR_BACKEND_PROJECT_KEY}"
    SONAR_BACKEND_PROJECT_NAME: "${SONAR_BACKEND_PROJECT_NAME}"
    GIT_DEPTH: "0"
  stage: test-sonar
  script:
    - cd backend-report
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=${SONAR_BACKEND_PROJECT_NAME}
      -Dsonar.projectKey=${SONAR_BACKEND_PROJECT_KEY}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_BACKEND_LOGIN}
  allow_failure: true

upload-release:
  stage: release
  image: docker:stable-dind
  services:
    - docker:dind
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}/sausage-backend-report:${VERSION}
    - docker tag ${CI_REGISTRY}/${CI_PROJECT_PATH}/sausage-backend-report:${VERSION}
      ${CI_REGISTRY}/${CI_PROJECT_PATH}/sausage-backend-report:latest
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}/sausage-backend-report:latest
  after_script:
    - docker logout ${CI_REGISTRY}

deploy-backend:
  stage: deploy
  image: vault:1.11.3
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo -e "SPRING_CLOUD_VAULT_TOKEN=$SPRING_CLOUD_VAULT_TOKEN\nSPRING_CLOUD_VAULT_HOST=$SPRING_CLOUD_VAULT_HOST\n" > .env_file
    - scp -r ./.env_file ./sausage-store.service ./docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
      export "DEV_USER=${DEV_USER}";
      export "SPRING_CLOUD_VAULT_TOKEN=${SPRING_CLOUD_VAULT_TOKEN}";
      export "SPRING_CLOUD_VAULT_HOST=${nSPRING_CLOUD_VAULT_HOST}";
      export "REGISTRY_ACCESS_TOKEN=${REGISTRY_ACCESS_TOKEN}";
      export "REGISTRY_USER=${REGISTRY_USER}";
      /bin/bash -s " < ./deploy-compose.sh
  environment:
    name: staging
    url: https://${DEV_HOST}
  when: manual
